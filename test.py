import telebot
from telebot import types
import random
import json
import os
from datetime import datetime, timedelta, timezone
import threading
import time
import pickle
from functools import wraps
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from telebot.types import BotCommand
from telebot import TeleBot, types





TOKEN = "**"
ADMIN_IDS = [**]
DATA_FILE = "casino_data.json"
LOG_FILE = "casino_log.txt"
BONUS_AMOUNT = 100
BONUS_THRESHOLD = 50
PENDING_TOPUPS = []
USER_BANS = {} 
BAN_LOG_FILE = "ban_log.json"




bot = telebot.TeleBot(TOKEN)

# ========== DATA MANAGEMENT ==========

@bot.message_handler(commands=['menu'])
def show_menu(message):
    send_reply_main_menu(message.chat.id)

bot.set_my_commands([
    BotCommand("start", "–ó–∞–ø—É—Å–∫/—Å–±—Ä–æ—Å –±–æ—Ç–∞"),
    BotCommand("menu", "–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
    BotCommand("help", "–ü–æ–º–æ—â—å"),
])    


def ban_guard_callback(func):
    @wraps(func)
    def wrapper(call, *args, **kwargs):
        user = get_user(call.from_user.id)
        username = user.get("username", "").lower()
        ban = USER_BANS.get(username)
        if ban and datetime.utcnow() < ban['until']:
            bot.answer_callback_query(
                call.id,
                f"‚õî –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –¥–æ {ban['until'].strftime('%Y-%m-%d %H:%M:%S')} UTC.\n–ü—Ä–∏—á–∏–Ω–∞: {ban['reason']}",
                show_alert=True
            )
            return
        return func(call, *args, **kwargs)
    return wrapper


def save_bans(bans):
    with open('user_bans.pickle', 'wb') as f:
        pickle.dump(bans, f)

def save_ban_log(ban_log):
    with open(BAN_LOG_FILE, "w", encoding="utf-8") as f:
        # –î–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ datetimes ‚Äî –ø–µ—Ä–µ–≤–æ–¥–∏–º –∏—Ö –≤ —Å—Ç—Ä–æ–∫—É
        serializable = []
        for entry in ban_log:
            entry_copy = entry.copy()
            for key in ["start", "until", "unban_time"]:
                if entry_copy.get(key) is not None:
                    entry_copy[key] = entry_copy[key].strftime("%Y-%m-%d %H:%M:%S")
            serializable.append(entry_copy)
        json.dump(serializable, f, ensure_ascii=False, indent=2)

def load_bans():
    try:
        with open('user_bans.pickle', 'rb') as f:
            return pickle.load(f)
    except Exception:
        return {}

def load_ban_log():
    try:
        with open(BAN_LOG_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
            # –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è datetime
            for entry in data:
                for key in ["start", "until", "unban_time"]:
                    if entry.get(key):
                        from datetime import datetime
                        entry[key] = datetime.strptime(entry[key], "%Y-%m-%d %H:%M:%S")
            return data
    except Exception:
        return []

BAN_LOG = load_ban_log()

def load_data():
    if not os.path.isfile(DATA_FILE):
        with open(DATA_FILE, "w") as f:
            json.dump({"users": {}, "dp_codes": {}}, f)
    with open(DATA_FILE, "r") as f:
        return json.load(f)

def save_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f)

def get_user(user_id):
    data = load_data()
    user_id = str(user_id)
    if user_id not in data["users"]:
        data["users"][user_id] = {
            "balance": 500,
            "username": "",
            "is_admin": user_id in map(str, ADMIN_IDS),
            "last_bonus": "",
            "registered": datetime.utcnow().strftime("%Y-%m-%d"),
            "exchanges": 0,
            "wins": 0,
            "bonuses": 0
        }
        save_data(data)
    return data["users"][user_id]

def set_user(user_id, user_data):
    data = load_data()
    data["users"][str(user_id)] = user_data
    save_data(data)

def update_username(user_id, username):
    user = get_user(user_id)
    if username:
        user["username"] = username.lstrip("@")
        set_user(user_id, user)

def get_top_users(limit=10):
    data = load_data()
    users = data["users"]
    sorted_users = sorted(users.items(), key=lambda x: x[1].get("balance", 0), reverse=True)
    return sorted_users[:limit]

def is_admin(user_id):
    user = get_user(user_id)
    return user.get("is_admin", False)

def find_userid_by_username(username):
    username = username.lstrip("@").lower()
    data = load_data()
    for uid, info in data["users"].items():
        if info.get("username", "").lower() == username:
            return int(uid)
    return None

def all_dp_codes_left():
    data = load_data()
    return dict(data.get("dp_codes", {}))

def dp_codes_left(nominal):
    data = load_data()
    nominal = str(nominal)
    return len(data.get("dp_codes", {}).get(nominal, []))

def add_dp_codes(nominal, codes, admin=None):
    data = load_data()
    nominal = str(nominal)
    if "dp_codes" not in data:
        data["dp_codes"] = {}
    if nominal not in data["dp_codes"]:
        data["dp_codes"][nominal] = []
    data["dp_codes"][nominal].extend(codes)
    save_data(data)
    log_dp(admin, f"–î–æ–±–∞–≤–∏–ª –∫–æ–¥—ã –Ω–æ–º–∏–Ω–∞–ª–æ–º {nominal}: {', '.join(codes)}")

def get_dp_code(nominal, user=None, admin=None):
    data = load_data()
    nominal = str(nominal)
    if "dp_codes" in data and nominal in data["dp_codes"] and data["dp_codes"][nominal]:
        code = data["dp_codes"][nominal][0]
        data["dp_codes"][nominal] = data["dp_codes"][nominal][1:]
        save_data(data)
        log_dp(user if user else admin, f"–í—ã–¥–∞–ª –∫–æ–¥ {code} –Ω–æ–º–∏–Ω–∞–ª–æ–º {nominal}")
        return code
    return None

# ========== LOGGING ==========
def write_log(line, log_type, user_id=None):
    dt = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")
    with open(LOG_FILE, "a", encoding="utf-8") as f:
        if user_id:
            f.write(f"[{dt}] [{log_type}] [{user_id}] {line}\n")
        else:
            f.write(f"[{dt}] [{log_type}] {line}\n")

def log_gwcoin(user, admin, old, new, diff, reason):
    who = f"@{user['username']}" if user else "?"
    adminpart = f" [by @{admin['username']}]" if admin else ""
    write_log(f"{who}{adminpart}: {old} -> {new} ({'+' if diff>=0 else ''}{diff}) {reason}", "GWCOIN", user.get('username',''))

def log_dp(user, msg):
    who = f"@{user['username']}" if user else "?"
    write_log(f"{who}: {msg}", "DP", user.get('username',''))

def log_user(user, msg):
    who = f"@{user['username']}" if user else "?"
    write_log(f"{who}: {msg}", "USER", user.get('username',''))

def log_bonus(user, bonus):
    who = f"@{user['username']}"
    write_log(f"{who} –ø–æ–ª—É—á–∏–ª –±–æ–Ω—É—Å +{bonus} GW-coin", "GWCOIN", user.get('username',''))

def log_user_activity(user_id, activity):
    write_log(activity, "USER", user_id)

def log_user_win(user_id, game, amount):
    write_log(f"–í—ã–∏–≥—Ä–∞–ª –≤ {game}: +{amount} GW-coin", "GWCOIN", user_id)

def log_user_exchange(user_id, gw, dp, code):
    write_log(f"–û–±–º–µ–Ω—è–ª {gw} GW-coin –Ω–∞ {dp} DP (–∫–æ–¥: {code})", "DP", user_id)

def get_user_logs(user_id, count=20):
    if not os.path.isfile(LOG_FILE):
        return []
    with open(LOG_FILE, "r", encoding="utf-8") as f:
        lines = [line for line in f if f"[{user_id}]" in line]
    return [line.split(']',3)[-1].strip() for line in lines[-count:]]

def show_log_lines(log_type, count=15):
    if not os.path.isfile(LOG_FILE):
        return []
    with open(LOG_FILE, "r", encoding="utf-8") as f:
        lines = [line for line in f if f"[{log_type}]" in line]
    return lines[-count:]

def ensure_profile_fields(user):
    changed = False
    if 'exchanges' not in user:
        user['exchanges'] = 0
        changed = True
    if 'wins' not in user:
        user['wins'] = 0
        changed = True
    if 'bonuses' not in user:
        user['bonuses'] = 0
        changed = True
    if 'registered' not in user:
        user['registered'] = datetime.utcnow().strftime("%Y-%m-%d")
        changed = True
    return changed

def increment_profile_field(user_id, field):
    user = get_user(user_id)
    ensure_profile_fields(user)
    user[field] += 1
    set_user(user_id, user)

# ========== MAIN REPLY MENU ==========
def send_reply_main_menu(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üéÆ –ò–≥—Ä—ã")
    markup.add("üí± –û–±–º–µ–Ω")
    markup.add("üéÅ –ë–æ–Ω—É—Å")
    markup.add("üèÜ –ë–∞–ª–∞–Ω—Å")
    markup.add("üìú –ü—Ä–æ—Ñ–∏–ª—å")
    markup.add("üèÖ –¢–û–ü")
    markup.add("üí∏ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å GW-coins")
    if is_admin(chat_id):
        markup.add("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
    bot.send_message(chat_id, "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=markup)

@bot.message_handler(commands=['start'])
def start(message):
    username = message.from_user.username or message.from_user.first_name
    update_username(message.from_user.id, username)
    user = get_user(message.from_user.id)
    if ensure_profile_fields(user):
        set_user(message.from_user.id, user)
    log_user(user, f"–í–æ—à–µ–ª –≤ –±–æ—Ç–∞ (start)")
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö–∞–∑–∏–Ω–æ! –í–∞—à —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: 1000 GW-coin.")
    send_reply_main_menu(message.chat.id)

# ========== GAMES MENU ==========
@bot.message_handler(func=lambda m: m.text == "üéÆ –ò–≥—Ä—ã")
def games_menu(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üé∞ –°–ª–æ—Ç—ã", callback_data="game_slots"))
    markup.add(types.InlineKeyboardButton("üé≤ –ö–æ—Å—Ç–∏", callback_data="game_dice"))
    markup.add(types.InlineKeyboardButton("‚ô†Ô∏è –ë–ª—ç–∫–¥–∂–µ–∫", callback_data="game_blackjack"))
    markup.add(types.InlineKeyboardButton("üé° –†—É–ª–µ—Ç–∫–∞", callback_data="game_roulette"))
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_main"))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "back_main")
def back_main(call):
    try:
        bot.delete_message(call.message.chat.id, call.message.message_id)
    except Exception:
        pass
    send_reply_main_menu(call.message.chat.id)

# ========== –°–õ–û–¢–´ ==========

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
POPULAR_BETS = [(10, "‚≠êÔ∏è"), (50, "‚≠êÔ∏è"), (100, "‚≠êÔ∏è"), (500, "‚≠êÔ∏è")]
SLOT_EMOJIS = ["üçí", "üçã", "üçâ", "‚≠êÔ∏è", "7Ô∏è‚É£"]
ANIMATION_DELAYS = [0.3, 0.3, 0.5, 0.7, 1.0]  # –ó–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤ –∞–Ω–∏–º–∞—Ü–∏–∏
MIN_BET = 10
MAX_BET = 500

def send_slots_bet_inline_keyboard(chat_id, user_id):
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = get_user(user_id)
    user_name = user.get("name", "–ò–≥—Ä–æ–∫")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –∏–ª–∏ "–ò–≥—Ä–æ–∫" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    user_balance = user["balance"]
    markup = types.InlineKeyboardMarkup(row_width=2)
    for bet, emoji in POPULAR_BETS:
        markup.add(types.InlineKeyboardButton(f"{emoji} {bet}", callback_data=f"slot_bet_{bet}"))
    markup.add(types.InlineKeyboardButton("üé≤ –î—Ä—É–≥–∞—è —Å—É–º–º–∞", callback_data="slot_bet_custom"))
    bot.send_message(
        chat_id,
        f"üé∞ {user_name}, –≤–∞—à –±–∞–ª–∞–Ω—Å: {user_balance} GW-coin\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–≤–∫—É (–º–∏–Ω–∏–º—É–º {MIN_BET}, –º–∞–∫—Å–∏–º—É–º {MAX_BET} GW-coin):",
        reply_markup=markup
    )

def animate_slot_roll(chat_id, message_id, result):
    """–ê–Ω–∏–º–∞—Ü–∏—è –≤—Ä–∞—â–µ–Ω–∏—è —Å–ª–æ—Ç–æ–≤ —Å –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π"""
    last_text = None
    
    for i in range(5):
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞—Ä–∞–±–∞–Ω–æ–≤
        if i < 2:  # –í—Å–µ –±–∞—Ä–∞–±–∞–Ω—ã –∫—Ä—É—Ç—è—Ç—Å—è
            roll = [random.choice(SLOT_EMOJIS) for _ in range(3)]
        elif i == 2:  # –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–µ—Ä–≤—ã–π –±–∞—Ä–∞–±–∞–Ω
            roll = [result[0], random.choice(SLOT_EMOJIS), random.choice(SLOT_EMOJIS)]
        elif i == 3:  # –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–≤–∞ –±–∞—Ä–∞–±–∞–Ω–∞
            roll = [result[0], result[1], random.choice(SLOT_EMOJIS)]
        else:  # –í—Å–µ –±–∞—Ä–∞–±–∞–Ω—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
            roll = result
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        current_text = format_slot_message(roll, i)
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è
        if current_text != last_text:
            try:
                bot.edit_message_text(
                    text=current_text,
                    chat_id=chat_id,
                    message_id=message_id
                )
                last_text = current_text
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é: {e}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫—É
            
        time.sleep(ANIMATION_DELAYS[i])

def format_slot_message(roll, step):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ª–æ—Ç–∞–º–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —ç—Ç–∞–ø–∞ –∞–Ω–∏–º–∞—Ü–∏–∏"""
    if step < 2:
        return f"üé∞ {' | '.join(roll)}"
    
    # –î–ª—è —ç—Ç–∞–ø–æ–≤ —Å —á–∞—Å—Ç–∏—á–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π
    parts = []
    for i in range(3):
        if step == 2 and i == 0:  # –ü–µ—Ä–≤—ã–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            parts.append(roll[0])
        elif step == 3 and i < 2:  # –ü–µ—Ä–≤—ã–µ –¥–≤–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
            parts.append(roll[i])
        elif step >= 4:  # –í—Å–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
            parts.append(roll[i])
        else:
            parts.append("üîÑ")  # –í—Ä–∞—â–∞—é—â–∏–π—Å—è —Å–∏–º–≤–æ–ª
    
    return f"üé∞ {' | '.join(parts)}"

def process_slots_bet_execute(message, bet):
    user_id = message.from_user.id
    user = get_user(user_id)
    user_balance = user["balance"]

    if bet > user_balance:
        bot.send_message(message.chat.id, "‚ùóÔ∏è –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ GW-coin!")
        return
    if bet > MAX_BET:
        bot.send_message(message.chat.id, f"üö´ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ‚Äî {MAX_BET} GW-coin.")
        return
    if bet < MIN_BET:
        bot.send_message(message.chat.id, f"üö´ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ‚Äî {MIN_BET} GW-coin.")
        return

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    result = [random.choice(SLOT_EMOJIS) for _ in range(3)]

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    sent_msg = bot.send_message(message.chat.id, "üé∞ üîÑ | üîÑ | üîÑ")

    # –ê–Ω–∏–º–∞—Ü–∏—è
    animate_slot_roll(message.chat.id, sent_msg.message_id, result)

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã–∏–≥—Ä—ã—à–∞
    win = calculate_win(result, bet)
    old_balance = user_balance
    user_balance = user_balance - bet + win
    user["balance"] = user_balance
    set_user(user_id, user)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    show_result(message.chat.id, result, bet, win, user_balance)

def calculate_win(result, bet):
    if result[0] == result[1] == result[2]:
        return bet * (10 if result[0] == "7Ô∏è‚É£" else 3)
    elif result[0] == result[1] or result[1] == result[2] or result[0] == result[2]:
        return bet * 2
    return 0

def show_result(chat_id, result, bet, win, balance):
    if result[0] == result[1] == result[2]:
        if result[0] == "7Ô∏è‚É£":
            msg = f"üéâ –î–ñ–ï–ö–ü–û–¢! 7Ô∏è‚É£7Ô∏è‚É£7Ô∏è‚É£ +{win} GW-coin!"
        else:
            msg = f"üéâ –¢—Ä–∏ {result[0]}! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win} GW-coin!"
    elif result[0] == result[1] or result[1] == result[2] or result[0] == result[2]:
        msg = f"üéä –î–≤–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö! –í—ã–∏–≥—Ä—ã—à {win} GW-coin!"
    else:
        msg = "üò¢ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏."
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîÅ –ï—â—ë —Ä–∞–∑", callback_data="game_slots"))
    markup.add(types.InlineKeyboardButton("üè† –£–π—Ç–∏", callback_data="leave_slots"))
    
    bot.send_message(
        chat_id,
        f"{msg}\n\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} GW-coin",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data == "game_slots")
def slots_handler_inline(call):
    bot.answer_callback_query(call.id)
    send_slots_bet_inline_keyboard(call.message.chat.id, call.from_user.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith("slot_bet_"))
def process_slots_bet_inline(call):
    bot.answer_callback_query(call.id)
    if call.data == "slot_bet_custom":
        msg = bot.send_message(call.message.chat.id, f"üí° –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Å—Ç–∞–≤–∫—É (–º–∏–Ω–∏–º—É–º {MIN_BET}, –º–∞–∫—Å–∏–º—É–º {MAX_BET} GW-coin):")
        bot.register_next_step_handler(msg, process_slots_bet_custom_input)
    else:
        bet = int(call.data.replace("slot_bet_", ""))
        process_slots_bet_execute(call.message, bet)

def process_slots_bet_custom_input(message):
    try:
        bet = int(message.text)
        process_slots_bet_execute(message, bet)
    except (ValueError, TypeError):
        bot.send_message(message.chat.id, f"üö´ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –Ω–µ –º–µ–Ω–µ–µ {MIN_BET} –∏ –Ω–µ –±–æ–ª–µ–µ {MAX_BET}.")

@bot.callback_query_handler(func=lambda call: call.data == "leave_slots")
def leave_slots_handler(call):
    bot.answer_callback_query(call.id)
    bot.send_message(call.message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É! –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å!")

# ========–ö–û–°–¢–ò=======
MIN_BET = 10
MAX_BET = 500

# --- –ö–æ—Å—Ç–∏ —Å –≤—ã–±–æ—Ä–æ–º —Å—Ç–∞–≤–∫–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ ---
def send_dice_bet_inline_keyboard(chat_id, user_id):
    user = get_user(user_id)  # –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π user_id
    user_name = user.get("name", "–ò–≥—Ä–æ–∫")
    user_balance = user["balance"]
    markup = types.InlineKeyboardMarkup(row_width=2)
    for bet, emoji in POPULAR_BETS:
        markup.add(types.InlineKeyboardButton(f"{emoji} {bet}", callback_data=f"dice_bet_{bet}"))
    markup.add(types.InlineKeyboardButton("üé≤ –î—Ä—É–≥–∞—è —Å—É–º–º–∞", callback_data="dice_bet_custom"))
    markup.add(types.InlineKeyboardButton("üè† –£–π—Ç–∏", callback_data="back_main"))
    bot.send_message(
        chat_id,
        f"üé∞ {user_name}, –≤–∞—à –±–∞–ª–∞–Ω—Å: {user_balance} GW-coin\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–≤–∫—É (–º–∏–Ω–∏–º—É–º {MIN_BET}, –º–∞–∫—Å–∏–º—É–º {MAX_BET} GW-coin):",
        reply_markup=markup
    )


@bot.callback_query_handler(func=lambda call: call.data == "game_dice")
@ban_guard_callback
def dice_handler_inline(call):
    bot.answer_callback_query(call.id)
    send_dice_bet_inline_keyboard(call.message.chat.id, call.from_user.id)  # –î–æ–±–∞–≤–ª—è–µ–º user_id

@bot.callback_query_handler(func=lambda call: call.data.startswith("dice_bet_"))
def process_dice_bet_inline(call):
    bot.answer_callback_query(call.id)
    if call.data == "dice_bet_custom":
        msg = bot.send_message(call.message.chat.id, f"üí° –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Å—Ç–∞–≤–∫—É (–º–∏–Ω–∏–º—É–º {MIN_BET}, –º–∞–∫—Å–∏–º—É–º {MAX_BET} GW-coin):")
        bot.register_next_step_handler(msg, process_dice_bet_custom_input)
    else:
        bet = int(call.data.replace("dice_bet_", ""))
        process_dice_bet_execute(call.message, bet)

def process_dice_bet_custom_input(message):
    try:
        bet = int(message.text)
        process_dice_bet_execute(message, bet)
    except (ValueError, TypeError):
        bot.send_message(message.chat.id, f"üö´ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –Ω–µ –º–µ–Ω–µ–µ {MIN_BET} –∏ –Ω–µ –±–æ–ª–µ–µ {MAX_BET}.")

def process_dice_bet_execute(message, bet):
    user_id = message.from_user.id
    user = get_user(user_id)
    old_balance = user["balance"] 
    if bet > user["balance"]:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ GW-coin!")
        send_dice_bet_inline_keyboard(message.chat.id, user_id)  # –î–æ–±–∞–≤–ª–µ–Ω user_id
        return
    if bet > MAX_BET:
        bot.send_message(message.chat.id, f"üö´ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ‚Äî {MAX_BET} GW-coin.")
        send_dice_bet_inline_keyboard(message.chat.id, user_id)  # –î–æ–±–∞–≤–ª–µ–Ω user_id
        return
    if bet < MIN_BET:
        bot.send_message(message.chat.id, f"üö´ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ‚Äî {MIN_BET} GW-coin.")
        send_dice_bet_inline_keyboard(message.chat.id, user_id)  # –î–æ–±–∞–≤–ª–µ–Ω user_id
        return
    
    user["balance"] -= bet
    set_user(user_id, user)

    bot.send_message(message.chat.id, "üé≤ –í—ã –±—Ä–æ—Å–∞–µ—Ç–µ –∫–æ—Å—Ç–∏...")
    player_dice_msg = bot.send_dice(message.chat.id, emoji="üé≤")
    import time
    time.sleep(3)
    player_value = player_dice_msg.dice.value

    bot.send_message(message.chat.id, "ü§ñ –¢–µ–ø–µ—Ä—å –±–æ—Ç –±—Ä–æ—Å–∞–µ—Ç –∫–æ—Å—Ç–∏...")
    bot_dice_msg = bot.send_dice(message.chat.id, emoji="üé≤")
    time.sleep(3)
    bot_value = bot_dice_msg.dice.value

    if player_value > bot_value:
        win = bet * 2
        result = f"üèÜ –í—ã –ø–æ–±–µ–¥–∏–ª–∏! +{win} GW-coin."
    elif player_value < bot_value:
        win = 0
        result = f"üò¢ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! -{bet} GW-coin."
    else:
        win = bet
        result = "ü§ù –ù–∏—á—å—è! –°—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è."

    old_balance = user["balance"]
    user["balance"] += win_amount
    set_user(user_id, user)
    
    if win > 0:
        increment_profile_field(user_id, "wins")
        log_user_win(user_id, "–ö–æ—Å—Ç–∏", win)
    set_user(user_id, user)
    log_gwcoin(user, None, user_balance, user["balance"], bet if win > bet else -bet, "–ö–æ—Å—Ç–∏")


    markup = types.InlineKeyboardMarkup()
    for bet_value, emoji in POPULAR_BETS:
        markup.add(types.InlineKeyboardButton(f"{emoji} {bet_value}", callback_data=f"dice_bet_{bet_value}"))
    markup.add(types.InlineKeyboardButton("üé≤ –î—Ä—É–≥–∞—è —Å—É–º–º–∞", callback_data="dice_bet_custom"))
    markup.add(types.InlineKeyboardButton("üè† –£–π—Ç–∏", callback_data="back_main"))

    bot.send_message(
        message.chat.id,
        f"<b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b>\n"
        f"–í—ã: {player_value}\n"
        f"–ë–æ—Ç: {bot_value}\n"
        f"{result}\n"
        f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user['balance']} GW-coin",
        parse_mode="HTML",
        reply_markup=markup
    )

# ========== –ë–õ–≠–ö–î–ñ–ï–ö ==========
import random
from telebot import types

# –ö–∞—Ä—Ç—ã: (–Ω–∞–∑–≤–∞–Ω–∏–µ, –Ω–æ–º–∏–Ω–∞–ª)
BJ_SUITS = ["‚ô†Ô∏è", "‚ô•Ô∏è", "‚ô¶Ô∏è", "‚ô£Ô∏è"]
BJ_CARDS = [
    ("A", [1, 11]),
    ("2", [2]),
    ("3", [3]),
    ("4", [4]),
    ("5", [5]),
    ("6", [6]),
    ("7", [7]),
    ("8", [8]),
    ("9", [9]),
    ("10", [10]),
    ("J", [10]),
    ("Q", [10]),
    ("K", [10]),
]

MIN_BET = 10
MAX_BET = 500

def bj_new_deck():
    deck = []
    for suit in BJ_SUITS:
        for name, value in BJ_CARDS:
            deck.append((name, suit, value))
    random.shuffle(deck)
    return deck

def bj_hand_str(hand):
    # hand: [(name, suit, [v])]
    return ", ".join(
        f"{name}{suit} ({'/'.join(map(str, value))})"
        for (name, suit, value) in hand
    )

def bj_hand_value(hand):
    # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª—É—á—à–∏–π –ø–æ–¥—Å—á—ë—Ç –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º –±–ª—ç–∫–¥–∂–µ–∫–∞
    values = [0]
    for name, suit, vlist in hand:
        new_values = []
        for v in vlist:
            for acc in values:
                new_values.append(acc + v)
        values = new_values
    # –í—Å–µ —Å—É–º–º—ã <= 21
    valid = [v for v in set(values) if v <= 21]
    if valid:
        return max(valid)
    return min(set(values))

def bj_init_game(user_id, bet):
    deck = bj_new_deck()
    user_hand = [deck.pop(), deck.pop()]
    bot_hand = [deck.pop(), deck.pop()]
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å—ë –≤ –ø–∞–º—è—Ç—å (–º–æ–∂–Ω–æ –≤ –±–∞–∑—É, —Ç—É—Ç –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä)
    BLACKJACK_SESSION[user_id] = {
        "deck": deck,
        "user": user_hand,
        "bot": bot_hand,
        "bet": bet,
        "state": "user_turn"
    }

def bj_get_session(user_id):
    return BLACKJACK_SESSION.get(user_id)

def bj_remove_session(user_id):
    if user_id in BLACKJACK_SESSION:
        del BLACKJACK_SESSION[user_id]

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Å—Å–∏–π (–ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å redis/db)
BLACKJACK_SESSION = {}

@bot.callback_query_handler(func=lambda call: call.data == "game_blackjack")
def start_blackjack(call):
    bot.answer_callback_query(call.id)
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Å—Ç–∞–≤–∫–∏ —á–µ—Ä–µ–∑ –∑–≤—ë–∑–¥–æ—á–∫–∏ (–∫–∞–∫ –≤ —Å–ª–æ—Ç–∞—Ö)
    markup = types.InlineKeyboardMarkup(row_width=2)
    for bet, emoji in POPULAR_BETS:
        markup.add(types.InlineKeyboardButton(f"{emoji} {bet}", callback_data=f"bj_bet_{bet}"))
    markup.add(types.InlineKeyboardButton("üé≤ –î—Ä—É–≥–∞—è —Å—É–º–º–∞", callback_data="bj_bet_custom"))
    markup.add(types.InlineKeyboardButton("üè† –£–π—Ç–∏", callback_data="back_main"))
    bot.send_message(
        call.message.chat.id,
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–≤–∫—É –¥–ª—è –ë–ª—ç–∫–¥–∂–µ–∫–∞ (–º–∏–Ω–∏–º—É–º {MIN_BET}, –º–∞–∫—Å–∏–º—É–º {MAX_BET} GW-coin):",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith("bj_bet_"))
def process_bj_bet_inline(call):
    bot.answer_callback_query(call.id)
    user = get_user(call.from_user.id)
    if call.data == "bj_bet_custom":
        msg = bot.send_message(call.message.chat.id, f"üí° –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Å—Ç–∞–≤–∫—É (–º–∏–Ω–∏–º—É–º {MIN_BET}, –º–∞–∫—Å–∏–º—É–º {MAX_BET} GW-coin):")
        bot.register_next_step_handler(msg, bj_bet_custom_input)
        return
    bet = int(call.data.replace("bj_bet_", ""))
    if bet < MIN_BET or bet > MAX_BET:
        bot.send_message(call.message.chat.id, f"üö´ –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ {MIN_BET} –∏ –Ω–µ –±–æ–ª–µ–µ {MAX_BET} GW-coin.")
        return
    if bet > user["balance"]:
        bot.send_message(call.message.chat.id, "–°—Ç–∞–≤–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ –∏–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤.")
        return
    bj_init_game(call.from_user.id, bet)
    bj_show_user_hand(call.message.chat.id, call.from_user.id)

def bj_bet_custom_input(message):
    user = get_user(message.from_user.id)
    try:
        bet = int(message.text)
        if bet < MIN_BET or bet > MAX_BET or bet > user["balance"]:
            raise ValueError
        bj_init_game(message.from_user.id, bet)
        bj_show_user_hand(message.chat.id, message.from_user.id)
    except Exception:
        bot.send_message(
            message.chat.id,
            f"üö´ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –Ω–µ –º–µ–Ω–µ–µ {MIN_BET} –∏ –Ω–µ –±–æ–ª–µ–µ {MAX_BET}, –∏ –Ω–µ –±–æ–ª—å—à–µ –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞."
        )

def bj_show_user_hand(chat_id, user_id):
    session = bj_get_session(user_id)
    if not session:
        bot.send_message(chat_id, "–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    user_hand = session["user"]
    value = bj_hand_value(user_hand)
    hand_str = bj_hand_str(user_hand)
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚ûï –ï—â—ë", callback_data="bj_hit"))
    markup.add(types.InlineKeyboardButton("üõë –•–≤–∞—Ç–∏—Ç", callback_data="bj_stand"))
    bot.send_message(
        chat_id,
        f"üÉè –í–∞—à–∏ –∫–∞—Ä—Ç—ã: {hand_str}\n–°—É–º–º–∞: {value}\n\n‚ûï ‚Äî –≤–∑—è—Ç—å –∫–∞—Ä—Ç—É\nüõë ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data in ["bj_hit", "bj_stand"])
def bj_user_action(call):
    session = bj_get_session(call.from_user.id)
    if not session or session["state"] != "user_turn":
        bot.answer_callback_query(call.id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã!")
        return

    if call.data == "bj_hit":
        session["user"].append(session["deck"].pop())
        value = bj_hand_value(session["user"])
        if value > 21:
            bj_finish_game(call.message.chat.id, call.from_user.id, "user_bust")
        else:
            bj_show_user_hand(call.message.chat.id, call.from_user.id)
    elif call.data == "bj_stand":
        session["state"] = "bot_turn"
        bj_bot_turn(call.message.chat.id, call.from_user.id)

def bj_bot_turn(chat_id, user_id):
    session = bj_get_session(user_id)
    bot_hand = session["bot"]
    while bj_hand_value(bot_hand) < 17:
        bot_hand.append(session["deck"].pop())
    bj_finish_game(chat_id, user_id, "resolve")

def bj_finish_game(chat_id, user_id, reason):
    session = bj_get_session(user_id)
    user_hand = session["user"]
    bot_hand = session["bot"]
    user_val = bj_hand_value(user_hand)
    bot_val = bj_hand_value(bot_hand)
    bet = session["bet"]
    user = get_user(user_id)
    old_balance = user["balance"]

    # –ò—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç
    user_str = bj_hand_str(user_hand)
    bot_str = bj_hand_str(bot_hand)
    result = ""
    win = 0

    if reason == "user_bust":
        result = f"üò¢ –ü–µ—Ä–µ–±–æ—Ä! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {bet} GW-coin."
        win = -bet
    elif user_val > 21:
        result = f"üò¢ –ü–µ—Ä–µ–±–æ—Ä! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {bet} GW-coin."
        win = -bet
    elif bot_val > 21:
        result = f"üèÜ –ë–æ—Ç –ø–µ—Ä–µ–±—Ä–∞–ª! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {int(bet * 1.8)} GW-coin!"
        win = int(bet * 1.8)
    elif user_val > bot_val:
        result = f"üèÜ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! +{int(bet * 1.8)} GW-coin."
        win = int(bet * 1.8)
    elif user_val == bot_val:
        result = "ü§ù –ù–∏—á—å—è! –°—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è."
        win = 0
    else:
        result = f"üò¢ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {bet} GW-coin."
        win = -bet

    user["balance"] += win
    set_user(user_id, user)
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–æ—á–µ–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

    markup = types.InlineKeyboardMarkup()
    for bet_value, emoji in POPULAR_BETS:
        markup.add(types.InlineKeyboardButton(f"{emoji} {bet_value}", callback_data=f"bj_bet_{bet_value}"))
    markup.add(types.InlineKeyboardButton("üé≤ –î—Ä—É–≥–∞—è —Å—É–º–º–∞", callback_data="bj_bet_custom"))
    markup.add(types.InlineKeyboardButton("üè† –£–π—Ç–∏", callback_data="back_main"))

    bot.send_message(
        chat_id,
        f"<b>–í–∞—à–∏ –∫–∞—Ä—Ç—ã:</b> {user_str}\n"
        f"<b>–°—É–º–º–∞:</b> {user_val}\n\n"
        f"<b>–ö–∞—Ä—Ç—ã –±–æ—Ç–∞:</b> {bot_str}\n"
        f"<b>–°—É–º–º–∞ –±–æ—Ç–∞:</b> {bot_val}\n\n"
        f"{result}\n"
        f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user['balance']} GW-coin",
        parse_mode="HTML",
        reply_markup=markup
    )
    bj_remove_session(user_id)


# ========== –†–£–õ–ï–¢–ö–ê ==========
import random
from telebot import types

ROULETTE_COLORS = {
    0: "green",
    1: "red", 2: "black", 3: "red", 4: "black", 5: "red", 6: "black",
    7: "red", 8: "black", 9: "red", 10: "black", 11: "black", 12: "red",
    13: "black", 14: "red", 15: "black", 16: "red", 17: "black", 18: "red",
    19: "red", 20: "black", 21: "red", 22: "black", 23: "red", 24: "black",
    25: "red", 26: "black", 27: "red", 28: "black", 29: "black", 30: "red",
    31: "black", 32: "red", 33: "black", 34: "red", 35: "black", 36: "red"
}

ROULETTE_EMOJIS = {
    "red": "üü•", "black": "‚¨õÔ∏è", "green": "üü©"
}

ROULETTE_BET_TYPES = [
    ("color_red", "üü• –ö—Ä–∞—Å–Ω–æ–µ"),
    ("color_black", "‚¨õÔ∏è –ß—ë—Ä–Ω–æ–µ"),
    ("even", "üîµ –ß—ë—Ç–Ω–æ–µ"),
    ("odd", "üü† –ù–µ—á—ë—Ç–Ω–æ–µ"),
    ("number", "üî¢ –ù–∞ —á–∏—Å–ª–æ (1-36)"),
    ("zero", "üü© –ó–µ—Ä–æ (0)"),
]

POPULAR_BETS = [(10, "‚≠êÔ∏è"), (50, "‚≠ê"), (100, "‚≠ê"), (500, "‚≠ê")]
MIN_BET = 10
MAX_BET = 500

ROULETTE_SESSION = {}

def roulette_spin_animation(bot, chat_id, msg_id, steps=8):
    """–ê–Ω–∏–º–∞—Ü–∏—è –≤—Ä–∞—â–µ–Ω–∏—è —Ä—É–ª–µ—Ç–∫–∏ —Å –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–º –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ–º."""
    for i in range(steps):
        num = random.randint(0, 36)
        color = ROULETTE_COLORS[num]
        emoji = ROULETTE_EMOJIS[color]
        dots = ''.join(['‚Ä¢ ' for _ in range(steps - i)])
        try:
            bot.edit_message_text(
                f"üé° –ö—Ä—É—Ç–∏–º —Ä—É–ª–µ—Ç–∫—É...\n{dots}\n–í—ã–ø–∞–¥–∞–µ—Ç: <b>{num} {emoji}</b>",
                chat_id,
                msg_id,
                parse_mode="HTML"
            )
        except Exception:
            pass
        import time
        time.sleep(0.15 + i * 0.09)  # —É—Å–∫–æ—Ä–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏

def send_roulette_bet_type_keyboard(chat_id, user_id):
    markup = types.InlineKeyboardMarkup(row_width=2)
    for key, name in ROULETTE_BET_TYPES:
        markup.add(types.InlineKeyboardButton(name, callback_data=f"roulette_type_{key}"))
    markup.add(types.InlineKeyboardButton("üé∞ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏ –∫—Ä—É—Ç–∏—Ç—å!", callback_data="roulette_finish_bets"))
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞–≤–∫–∏ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –≤—ã–±–æ—Ä:", reply_markup=markup)
    show_current_bets(chat_id, user_id)

def show_current_bets(chat_id, user_id):
    session = ROULETTE_SESSION.get(user_id)
    if not session or not session.get("bets"):
        return
    bets_text = "\n".join([format_bet(bet) for bet in session["bets"]])
    bot.send_message(chat_id, f"–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ —Å—Ç–∞–≤–∫–∏:\n{bets_text}")

def format_bet(bet):
    if bet["type"] == "color_red":
        return f"üü• –ö—Ä–∞—Å–Ω–æ–µ ‚Äî {bet['amount']} GW-coin"
    if bet["type"] == "color_black":
        return f"‚¨õÔ∏è –ß—ë—Ä–Ω–æ–µ ‚Äî {bet['amount']} GW-coin"
    if bet["type"] == "even":
        return f"üîµ –ß—ë—Ç–Ω–æ–µ ‚Äî {bet['amount']} GW-coin"
    if bet["type"] == "odd":
        return f"üü† –ù–µ—á—ë—Ç–Ω–æ–µ ‚Äî {bet['amount']} GW-coin"
    if bet["type"] == "zero":
        return f"üü© –ó–µ—Ä–æ (0) ‚Äî {bet['amount']} GW-coin"
    if bet["type"] == "number":
        return f"üî¢ –ß–∏—Å–ª–æ {bet['number']} ‚Äî {bet['amount']} GW-coin"
    return "–°—Ç–∞–≤–∫–∞"

@bot.callback_query_handler(func=lambda call: call.data == "game_roulette")
def roulette_start(call):
    user_id = call.from_user.id
    bot.answer_callback_query(call.id)
    user = get_user(user_id)
    ROULETTE_SESSION[user_id] = {"bets": [], "balance_left": user["balance"]}
    send_roulette_bet_type_keyboard(call.message.chat.id, user_id)

@bot.callback_query_handler(func=lambda call: call.data.startswith("roulette_type_"))
def roulette_choose_type(call):
    user_id = call.from_user.id
    session = ROULETTE_SESSION.get(user_id)
    if not session:
        bot.send_message(call.message.chat.id, "–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∏–≥—Ä—É.")
        return
    bet_type = call.data.replace("roulette_type_", "")
    session["pending_type"] = bet_type
    # –¢–µ–ø–µ—Ä—å —Å–ø—Ä–æ—Å–∏–º —Å—É–º–º—É
    markup = types.InlineKeyboardMarkup(row_width=2)
    for bet, emoji in POPULAR_BETS:
        markup.add(types.InlineKeyboardButton(f"{emoji} {bet}", callback_data=f"roulette_amt_{bet}"))
    markup.add(types.InlineKeyboardButton("üé≤ –î—Ä—É–≥–∞—è —Å—É–º–º–∞", callback_data="roulette_amt_custom"))
    bot.send_message(call.message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —ç—Ç–æ–π —Å—Ç–∞–≤–∫–∏ (–æ—Ç {MIN_BET} –¥–æ {MAX_BET} GW-coin):", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("roulette_amt_"))
def roulette_choose_amount(call):
    user_id = call.from_user.id
    session = ROULETTE_SESSION.get(user_id)
    if not session or "pending_type" not in session:
        bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞ —Å–µ—Å—Å–∏–∏.")
        return
    if call.data == "roulette_amt_custom":
        msg = bot.send_message(call.message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Å—É–º–º—É (–æ—Ç {MIN_BET} –¥–æ {MAX_BET}):")
        bot.register_next_step_handler(msg, lambda m: roulette_set_amount_custom(m, user_id))
        return
    amount = int(call.data.replace("roulette_amt_", ""))
    roulette_add_bet(call.message, user_id, amount)

def roulette_set_amount_custom(message, user_id):
    try:
        amount = int(message.text)
        if amount < MIN_BET or amount > MAX_BET:
            raise ValueError
        roulette_add_bet(message, user_id, amount)
    except Exception:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç {MIN_BET} –¥–æ {MAX_BET}.")

def roulette_add_bet(message, user_id, amount):
    user = get_user(user_id)
    session = ROULETTE_SESSION.get(user_id)
    if not session or "pending_type" not in session:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ —Å–µ—Å—Å–∏–∏.")
        return
    if amount > session["balance_left"]:
        bot.send_message(message.chat.id, "‚ùóÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —ç—Ç–æ–π —Å—Ç–∞–≤–∫–∏.")
        send_roulette_bet_type_keyboard(message.chat.id, user_id)
        return
    if amount < MIN_BET or amount > MAX_BET:
        bot.send_message(message.chat.id, f"üö´ –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç {MIN_BET} –¥–æ {MAX_BET} GW-coin.")
        send_roulette_bet_type_keyboard(message.chat.id, user_id)
        return

    bet_type = session.pop("pending_type")
    bet = {"type": bet_type, "amount": amount}
    if bet_type == "number":
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 36:")
        bot.register_next_step_handler(msg, lambda m: roulette_set_number(m, user_id, amount))
        # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–∫–∞ —á–∏—Å–ª–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ
        return
    session["bets"].append(bet)
    session["balance_left"] -= amount
    send_roulette_bet_type_keyboard(message.chat.id, user_id)

def roulette_set_number(message, user_id, amount):
    try:
        number = int(message.text)
        if number < 1 or number > 36:
            raise ValueError
        session = ROULETTE_SESSION.get(user_id)
        bet = {"type": "number", "amount": amount, "number": number}
        session["bets"].append(bet)
        session["balance_left"] -= amount
        send_roulette_bet_type_keyboard(message.chat.id, user_id)
    except Exception:
        bot.send_message(message.chat.id, "–ù—É–∂–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 36!")

@bot.callback_query_handler(func=lambda call: call.data == "roulette_finish_bets")
def roulette_finish_bets(call):
    user_id = call.from_user.id
    session = ROULETTE_SESSION.get(user_id)
    if not session or not session["bets"]:
        bot.send_message(call.message.chat.id, "–°—Ç–∞–≤–æ–∫ –Ω–µ—Ç. –°–¥–µ–ª–∞–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É!")
        return
    user = get_user(user_id)

    # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ—à—å –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ("–∫—Ä—É—Ç–∏–º —Ä—É–ª–µ—Ç–∫—É...")
    sent = bot.send_message(call.message.chat.id, "üé° –ö—Ä—É—Ç–∏–º —Ä—É–ª–µ—Ç–∫—É...")
    # 2. –ê–Ω–∏–º–∞—Ü–∏—è
    roulette_spin_animation(bot, call.message.chat.id, sent.message_id)
    # 3. –¢–µ–ø–µ—Ä—å –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    spin_number = random.randint(0, 36)
    spin_color = ROULETTE_COLORS[spin_number]
    color_emoji = ROULETTE_EMOJIS[spin_color]
    total_win = 0
    results = []
    for bet in session["bets"]:
        result, win = check_roulette_bet(bet, spin_number, spin_color)
        results.append(result)
        total_win += win

    user["balance"] += total_win - sum(b["amount"] for b in session["bets"])
    set_user(user_id, user)

    msg = (f"üé° <b>–†—É–ª–µ—Ç–∫–∞!</b>\n"
           f"–í—ã–ø–∞–ª–æ: <b>{spin_number} {color_emoji}</b> ({spin_color})\n\n"
           + "\n".join(results) +
           f"\n\n–í–∞—à –±–∞–ª–∞–Ω—Å: <b>{user['balance']} GW-coin</b>")

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîÅ –ù–æ–≤–∞—è –∏–≥—Ä–∞", callback_data="game_roulette"))
    markup.add(types.InlineKeyboardButton("üè† –£–π—Ç–∏", callback_data="back_main"))
    bot.edit_message_text(msg, call.message.chat.id, sent.message_id, parse_mode="HTML", reply_markup=markup)
    ROULETTE_SESSION.pop(user_id, None)

def check_roulette_bet(bet, spin_number, spin_color):
    win = 0
    if bet["type"] == "color_red":
        if spin_color == "red":
            win = bet["amount"] * 2
            return f"üü• –ö—Ä–∞—Å–Ω–æ–µ: +{win} GW-coin", win
        else:
            return f"üü• –ö—Ä–∞—Å–Ω–æ–µ: –ø—Ä–æ–∏–≥—Ä—ã—à", 0
    if bet["type"] == "color_black":
        if spin_color == "black":
            win = bet["amount"] * 2
            return f"‚¨õÔ∏è –ß—ë—Ä–Ω–æ–µ: +{win} GW-coin", win
        else:
            return f"‚¨õÔ∏è –ß—ë—Ä–Ω–æ–µ: –ø—Ä–æ–∏–≥—Ä—ã—à", 0
    if bet["type"] == "even":
        if spin_number != 0 and spin_number % 2 == 0:
            win = bet["amount"] * 2
            return f"üîµ –ß—ë—Ç–Ω–æ–µ: +{win} GW-coin", win
        else:
            return f"üîµ –ß—ë—Ç–Ω–æ–µ: –ø—Ä–æ–∏–≥—Ä—ã—à", 0
    if bet["type"] == "odd":
        if spin_number % 2 == 1:
            win = bet["amount"] * 2
            return f"üü† –ù–µ—á—ë—Ç–Ω–æ–µ: +{win} GW-coin", win
        else:
            return f"üü† –ù–µ—á—ë—Ç–Ω–æ–µ: –ø—Ä–æ–∏–≥—Ä—ã—à", 0
    if bet["type"] == "zero":
        if spin_number == 0:
            win = bet["amount"] * 36
            return f"üü© –ó–µ—Ä–æ (0): +{win} GW-coin", win
        else:
            return f"üü© –ó–µ—Ä–æ (0): –ø—Ä–æ–∏–≥—Ä—ã—à", 0
    if bet["type"] == "number":
        if spin_number == bet["number"]:
            win = bet["amount"] * 36
            return f"üî¢ –ß–∏—Å–ª–æ {bet['number']}: +{win} GW-coin", win
        else:
            return f"üî¢ –ß–∏—Å–ª–æ {bet['number']}: –ø—Ä–æ–∏–≥—Ä—ã—à", 0
    return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞", 0


# ========== –û–ë–ú–ï–ù ==========
@bot.message_handler(func=lambda m: m.text == "üí± –û–±–º–µ–Ω")
def exchange_menu(message):
    markup = types.InlineKeyboardMarkup()
    user = get_user(message.from_user.id)
    codes = all_dp_codes_left()
    for nominal in sorted(codes, key=lambda x: int(x)):
        dp = int(nominal)
        left = len(codes[nominal])
        need_gw = dp * 100
        if left > 0 and user['balance'] >= need_gw:
            markup.add(types.InlineKeyboardButton(f"{dp} DP ({left} –∫–æ–¥–æ–≤)", callback_data=f"try_exchange_{dp}"))
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_main"))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ DP –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å:", reply_markup=markup)

@bot.callback_query_handler(lambda call: call.data.startswith("try_exchange_"))
@ban_guard_callback
def confirm_exchange_menu(call):
    dp = int(call.data.split("_")[-1])
    gw = dp * 100
    user = get_user(call.from_user.id)
    if user["balance"] < gw:
        bot.answer_callback_query(call.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ GW-coin.", show_alert=True)
        send_reply_main_menu(call.message.chat.id)
        return
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_exchange_{dp}_{gw}"),
        types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="exchange")
    )
    bot.send_message(call.message.chat.id, f"–û–±–º–µ–Ω—è—Ç—å {gw} GW-coin –Ω–∞ {dp} DP?", reply_markup=markup)

@bot.callback_query_handler(lambda call: call.data.startswith("confirm_exchange_"))
@ban_guard_callback
def process_exchange_confirm(call):
    try:
        parts = call.data.split("_")
        dp = int(parts[2])
        gw = int(parts[3])
    except Exception as e:
        bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞ –æ–±–º–µ–Ω–∞: {e}", show_alert=True)
        send_reply_main_menu(call.message.chat.id)
        return

    user = get_user(call.from_user.id)
    if user["balance"] < gw:
        bot.answer_callback_query(call.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ GW-coin.", show_alert=True)
        send_reply_main_menu(call.message.chat.id)
        return
    code = get_dp_code(dp, user)
    if not code:
        bot.answer_callback_query(call.id, f"–ö–æ–¥—ã –Ω–æ–º–∏–Ω–∞–ª–æ–º {dp} DP –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.", show_alert=True)
        send_reply_main_menu(call.message.chat.id)
        return
    old = user["balance"]
    user["balance"] -= gw
    user["exchanges"] = user.get("exchanges", 0) + 1
    set_user(call.from_user.id, user)
    log_gwcoin(user, None, old, user["balance"], -gw, f"–û–±–º–µ–Ω –Ω–∞ {dp} DP")
    log_dp(user, f"–û–±–º–µ–Ω—è–ª {gw} GW-coin –Ω–∞ DP-–∫–æ–¥ {code} ({dp} DP)")
    log_user_exchange(user.get("username", ""), gw, dp, code)
    bot.answer_callback_query(call.id, "–£—Å–ø–µ—à–Ω–æ!", show_alert=True)
    bot.send_message(
    call.message.chat.id,
    (
        f"–í–∞—à DP-–∫–æ–¥ –Ω–∞ {dp} DP: `{code}`\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –Ω–∞ —Å–∞–π—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª–µ <a href=\"https://classic.rp-gameworld.ru/donate/\">–¥–æ–Ω–∞—Ç</a>, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å DP.\n"
        f"–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user['balance']} GW-coin"
    ),
    parse_mode="HTML"
)
    send_reply_main_menu(call.message.chat.id)

# ========== –ë–û–ù–£–° ==========
@bot.message_handler(func=lambda m: m.text == "üéÅ –ë–æ–Ω—É—Å")
def bonus_menu(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å", callback_data="bonus"))
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_main"))
    bot.send_message(message.chat.id, "–ë–æ–Ω—É—Å:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "bonus")
@ban_guard_callback
def bonus_handler_inline(call):
    user = get_user(call.from_user.id)
    now = datetime.utcnow()
    try:
        last = datetime.strptime(user.get("last_bonus", ""), "%Y-%m-%d")
    except Exception:
        last = datetime(1970,1,1)
    if user["balance"] >= BONUS_THRESHOLD:
        bot.answer_callback_query(call.id, f"–ë–æ–Ω—É—Å –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É –≤–∞—Å –º–µ–Ω—å—à–µ {BONUS_THRESHOLD} GW-coin!", show_alert=True)
        send_reply_main_menu(call.message.chat.id)
        return
    if last.date() == now.date():
        bot.answer_callback_query(call.id, "–ë–æ–Ω—É—Å —É–∂–µ –ø–æ–ª—É—á–µ–Ω —Å–µ–≥–æ–¥–Ω—è! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞.", show_alert=True)
        send_reply_main_menu(call.message.chat.id)
        return
    old = user["balance"]
    user["balance"] += BONUS_AMOUNT
    user["last_bonus"] = now.strftime("%Y-%m-%d")
    user["bonuses"] = user.get("bonuses", 0) + 1
    set_user(call.from_user.id, user)
    log_bonus(user, BONUS_AMOUNT)
    bot.answer_callback_query(call.id, f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω –±–æ–Ω—É—Å: +{BONUS_AMOUNT} GW-coin!\n–¢–µ–ø–µ—Ä—å —É –≤–∞—Å: {user['balance']} GW-coin.", show_alert=True)
    send_reply_main_menu(call.message.chat.id)

# ========== –ë–ê–õ–ê–ù–° ==========
@bot.message_handler(func=lambda m: m.text == "üèÜ –ë–∞–ª–∞–Ω—Å")
def balance_menu(message):
    user = get_user(message.from_user.id)
    bot.send_message(message.chat.id, f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user['balance']} GW-coin")
    send_reply_main_menu(message.chat.id)

@bot.callback_query_handler(func=lambda call: call.data == "balance")
def balance_handler(call):
    user = get_user(call.from_user.id)
    text = f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user['balance']} GW-coin."
    bot.answer_callback_query(call.id)
    bot.send_message(call.message.chat.id, text)
    send_reply_main_menu(call.message.chat.id)

# ========== –¢–û–ü ==========
@bot.message_handler(func=lambda m: m.text == "üèÖ –¢–û–ü")
def top_menu(message):
    top = get_top_users()
    text = "üèÖ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤:\n"
    for i, (user_id, info) in enumerate(top, 1):
        name = info.get("username") or f"ID:{user_id}"
        text += f"{i}. {name}: {info['balance']} GW-coin\n"
    bot.send_message(message.chat.id, text)
    send_reply_main_menu(message.chat.id)

@bot.callback_query_handler(func=lambda call: call.data == "top")
@ban_guard_callback
def top_handler(call):
    top = get_top_users()
    text = "üèÖ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤:\n"
    for i, (user_id, info) in enumerate(top, 1):
        name = info.get("username") or f"ID:{user_id}"
        text += f"{i}. {name}: {info['balance']} GW-coin\n"
    bot.answer_callback_query(call.id)
    bot.send_message(call.message.chat.id, text)
    send_reply_main_menu(call.message.chat.id)

# ======–ü–û–ö–£–ü–ö–ê GW-COINS=====

@bot.message_handler(func=lambda m: m.text == "üí∏ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å")
def topup_request(message):
    user = get_user(message.from_user.id)
    username = user.get("username") or f"id{message.from_user.id}"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –∑–∞—è–≤–∫–∞ –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –∏ –Ω–µ –∑–∞–∫—Ä—ã—Ç–∞ ‚Äî –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç!
    for req in PENDING_TOPUPS:
        if req['user_id'] == message.from_user.id and req['taken_by'] is None:
            bot.send_message(message.chat.id, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return

    bot.send_message(message.chat.id, "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é!")
    PENDING_TOPUPS.append({
        'user_id': message.from_user.id,
        'username': username,
        'taken_by': None,
        'time': datetime.utcnow()
    })
    send_topup_notifications()  # –ù–µ –∑–∞–±—É–¥—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–æ–≤

@bot.message_handler(func=lambda m: m.text == "üí∏ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å GW-coins")
def topup_info(message):
    text = (
        "<b>GW-coins ‚Äî –≤–Ω—É—Ç—Ä–∏–∏–≥—Ä–æ–≤–∞—è –≤–∞–ª—é—Ç–∞</b>\n\n"
        "–í–∞–ª—é—Ç–∞ GW-coins, –∏—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –≤ –¥–∞–Ω–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ, —è–≤–ª—è–µ—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∏ –Ω–µ –∏–º–µ–µ—Ç –Ω–∏–∫–∞–∫–æ–≥–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∫ —Ä–µ–∞–ª—å–Ω—ã–º –¥–µ–Ω–µ–∂–Ω—ã–º —Å—Ä–µ–¥—Å—Ç–≤–∞–º. "
        "–õ—é–±–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –∏ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –≤–∞–ª—é—Ç–∞–º–∏ —è–≤–ª—è–µ—Ç—Å—è —Å–ª—É—á–∞–π–Ω—ã–º.\n\n"
        "–ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É ¬´–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å GW-coins¬ª, –≤—ã –Ω–µ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç–µ –ø–æ–∫—É–ø–∫—É —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥–∏. "
        "–í—Å–µ —Å—Ä–µ–¥—Å—Ç–≤–∞, —Å–ø–∏—Å—ã–≤–∞–µ–º—ã–µ —Å –≤–∞—à–µ–≥–æ –ª–∏—á–Ω–æ–≥–æ —Å—á–µ—Ç–∞, —Å—É—â–µ—Å—Ç–≤—É—é—Ç —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–º–∫–∞—Ö –∏–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏ –Ω–µ –ø–æ–¥–ª–µ–∂–∞—Ç –æ–±–º–µ–Ω—É –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–µ–Ω—å–≥–∏.\n\n"
        "–ü–æ–ª—É—á–µ–Ω–∏–µ GW-coins –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏:\n"
        "‚Äî –ó–∞ —É—á–∞—Å—Ç–∏–µ –≤ –∏–≥—Ä–æ–≤—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è—Ö –∏ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö –≤–Ω—É—Ç—Ä–∏ –ø—Ä–æ–µ–∫—Ç–∞.\n"
        "‚Äî –ü—É—Ç—ë–º –¥–æ–±—Ä–æ–≤–æ–ª—å–Ω–æ–≥–æ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ —Å –ø–æ—Å–ª–µ–¥—É—é—â–∏–º –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ–º GW-coins –Ω–∞ –≤–∞—à –∏–≥—Ä–æ–≤–æ–π –±–∞–ª–∞–Ω—Å.\n\n"
        "–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è —è–≤–ª—è—é—Ç—Å—è –¥–æ–±—Ä–æ–≤–æ–ª—å–Ω—ã–º–∏ –∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Ä–∞–∑–≤–∏—Ç–∏—è –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ RPGW."
    )
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="topup_confirm"))
    markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_main"))
    bot.send_message(message.chat.id, text, reply_markup=markup, parse_mode="HTML")    

@bot.callback_query_handler(lambda call: call.data == "topup_confirm")
@ban_guard_callback
def topup_confirmed(call):
    user = get_user(call.from_user.id)
    username = user.get("username") or f"id{call.from_user.id}"
    bot.send_message(call.message.chat.id, "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é!")
    # –î–æ–±–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –≤ –æ—á–µ—Ä–µ–¥—å (–∫–∞–∫ –≤ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—ã—à–µ)
    from datetime import datetime
    PENDING_TOPUPS.append({
        'user_id': call.from_user.id,
        'username': username,
        'taken_by': None,
        'time': datetime.utcnow()
    })
    send_topup_notifications()  # —Ä–µ–∞–ª–∏–∑—É–π –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π —É–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∞–º

@bot.callback_query_handler(lambda call: call.data == "back_main")
def back_to_main(call):
    send_reply_main_menu(call.message.chat.id)

# ========== –ü–†–û–§–ò–õ–¨ ==========
@bot.message_handler(func=lambda m: m.text == "üìú –ü—Ä–æ—Ñ–∏–ª—å")
def profile_menu(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"))
    markup.add(types.InlineKeyboardButton("–ú–æ–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", callback_data="transactions"))
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_main"))
    bot.send_message(message.chat.id, "–ü—Ä–æ—Ñ–∏–ª—å:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "profile")
def profile_handler(call):
    user = get_user(call.from_user.id)
    ensure_profile_fields(user)
    text = (
        f"üë§ –ü—Ä–æ—Ñ–∏–ª—å @{user['username']}\n"
        f"–ë–∞–ª–∞–Ω—Å: {user['balance']} GW-coin\n"
        f"–û–±–º–µ–Ω–æ–≤: {user.get('exchanges', 0)}\n"
        f"–í—ã–∏–≥—Ä—ã—à–µ–π: {user.get('wins', 0)}\n"
        f"–ë–æ–Ω—É—Å–æ–≤: {user.get('bonuses', 0)}\n"
        f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.get('registered', 'N/A')}\n"
    )
    bot.answer_callback_query(call.id)
    bot.send_message(call.message.chat.id, text)
    send_reply_main_menu(call.message.chat.id)

@bot.callback_query_handler(func=lambda call: call.data == "transactions")
def transactions_handler(call):
    logs = get_user_logs(call.from_user.id, count=20)
    text = "üßæ –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:\n" + "\n".join(logs) if logs else "–ù–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π."
    bot.answer_callback_query(call.id)
    bot.send_message(call.message.chat.id, text)
    send_reply_main_menu(call.message.chat.id)



# ========== –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ ==========
@bot.message_handler(func=lambda m: m.text == "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
def admin_menu(message):
    if not is_admin(message.from_user.id):
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_main"))
    bot.send_message(message.chat.id, "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "admin_topup_requests")
def admin_topup_requests_menu(call):
    if not is_admin(call.from_user.id):
        bot.send_message(call.message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    if not PENDING_TOPUPS:
        bot.send_message(call.message.chat.id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ.")
        return

    for req in PENDING_TOPUPS:
        status = f"–í —Ä–∞–±–æ—Ç–µ —É @{req['taken_by']}" if req['taken_by'] else "–û–∂–∏–¥–∞–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"
        text = (
            f"üí≥ –ó–∞—è–≤–∫–∞:\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{req['username']} (ID: {req['user_id']})\n"
            f"–°—Ç–∞—Ç—É—Å: {status}\n"
            f"–í—Ä–µ–º—è –∑–∞—è–≤–∫–∏: {req['time'].strftime('%Y-%m-%d %H:%M:%S')}\n"
        )
        markup = types.InlineKeyboardMarkup()
        if not req['taken_by']:
            markup.add(types.InlineKeyboardButton("–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"take_topup_{req['user_id']}"))
        bot.send_message(call.message.chat.id, text, reply_markup=markup)


# ======–ë–ê–ù–´=======

def is_banned(user_id):
    user = get_user(user_id)
    username = user.get("username", "").lower()
    ban = USER_BANS.get(username)
    if ban:
        if datetime.utcnow() < ban['until']:
            return True
        else:
            del USER_BANS[username]
            save_bans(USER_BANS)
    return False

def unban_log(user_id, by):
    # –î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ —Ä–∞–∑–±–∞–Ω–∞ –≤ –ª–æ–≥
    for log in reversed(BAN_LOG):
        if log['user_id'] == user_id and log['action'] == 'ban' and not log.get('unban_time'):
            log['action'] = 'ban+unban'
            log['unban_by'] = by
            log['unban_time'] = datetime.utcnow()
            break
    save_ban_log(BAN_LOG)


@bot.message_handler(commands=['ban'])
def ban_user(message):
    if not is_admin(message.from_user.id):
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    try:
        parts = message.text.split(maxsplit=3)
        user_id = int(parts[1])
        minutes = int(parts[2])
        reason = parts[3] if len(parts) > 3 else "–ë–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã"
    except Exception:
        bot.send_message(message.chat.id, "–ü—Ä–∏–º–µ—Ä: /ban 123456789 60 —Ñ–ª—É–¥")
        return
    until = datetime.utcnow() + timedelta(minutes=minutes)
    admin = get_user(message.from_user.id, message.from_user)
    user_name = None
    try:
        user_chat = bot.get_chat(user_id)
        user_name = get_user(user_id, user_chat)
    except Exception:
        user_name = f"id{user_id}"
    USER_BANS[user_id] = {
        'until': until,
        'reason': reason,
        'by': admin,
        'time': datetime.utcnow(),
        'username': user_name
    }
    save_bans(USER_BANS)
    BAN_LOG.append({
        'user_id': user_id,
        'username': user_name,
        'by': admin,
        'reason': reason,
        'start': datetime.utcnow(),
        'until': until,
        'action': 'ban',
        'unban_by': None,
        'unban_time': None
    })
    save_ban_log(BAN_LOG)
    bot.send_message(message.chat.id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–∞–Ω–µ–Ω –¥–æ {until.strftime('%Y-%m-%d %H:%M:%S')} UTC.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")
    try:
        bot.send_message(user_id, f"‚õî –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –¥–æ {until.strftime('%Y-%m-%d %H:%M:%S')} UTC.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")
    except Exception:
        pass

@bot.message_handler(commands=['unban'])
def unban_user(message):
    if not is_admin(message.from_user.id):
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    try:
        user_id = int(message.text.split()[1])
    except Exception:
        bot.send_message(message.chat.id, "–ü—Ä–∏–º–µ—Ä: /unban 123456789")
        return
    if user_id in USER_BANS:
        del USER_BANS[user_id]
        save_bans(USER_BANS)
        unban_log(user_id, get_user(message.from_user.id, message.from_user))
        bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–∞–Ω–µ–Ω.")
        try:
            bot.send_message(user_id, "‚õî –í–∞—à –±–∞–Ω —Å–Ω—è—Ç. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.")
        except Exception:
            pass
    else:
        bot.send_message(message.chat.id, "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–∞–Ω–∞.")    

def admin_bans_menu(call):
    text = "<b>–ê–∫—Ç–∏–≤–Ω—ã–µ –±–∞–Ω—ã:</b>\n"
    if not USER_BANS:
        text += "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∞–Ω–æ–≤.\n"
    else:
        for uid, ban in USER_BANS.items():
            text += (
                f"üîª <b>@{ban['username']}</b> (ID: {uid})\n"
                f"‚Äî –î–æ: {ban['until'].strftime('%Y-%m-%d %H:%M:%S')} UTC\n"
                f"‚Äî –ü—Ä–∏—á–∏–Ω–∞: {ban['reason']}\n"
                f"‚Äî –ö–µ–º: @{ban['by']}\n\n"
            )
    text += "\n<b>–ò—Å—Ç–æ—Ä–∏—è –±–∞–Ω–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10):</b>\n"
    if not BAN_LOG:
        text += "–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.\n"
    else:
        for entry in BAN_LOG[-10:][::-1]:
            text += (
                f"üïì <b>@{entry['username']}</b> (ID: {entry['user_id']})\n"
                f"‚Äî –°: {entry['start'].strftime('%Y-%m-%d %H:%M:%S')}\n"
                f"‚Äî –î–æ: {entry['until'].strftime('%Y-%m-%d %H:%M:%S')}\n"
                f"‚Äî –ü—Ä–∏—á–∏–Ω–∞: {entry['reason']}\n"
                f"‚Äî –ö–µ–º: @{entry['by']}\n"
            )
            if entry.get('unban_time'):
                text += (
                    f"‚Äî –†–∞–∑–±–∞–Ω–µ–Ω: {entry['unban_time'].strftime('%Y-%m-%d %H:%M:%S')} –∞–¥–º–∏–Ω–æ–º: @{entry['unban_by']}\n"
                )
            text += "\n"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_main"))
    bot.send_message(call.message.chat.id, text, reply_markup=markup, parse_mode="HTML")


@bot.callback_query_handler(func=lambda call: call.data == "admin_bans")
def admin_bans_menu_callback(call):
    if not is_admin(call.from_user.id):
        bot.send_message(call.message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    send_admin_bans_menu(call.message.chat.id)

# --- –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
@bot.callback_query_handler(func=lambda call: call.data == "ban_do")
def ban_do_callback(call):
    msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ username (@username), –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö –∏ –ø—Ä–∏—á–∏–Ω—É (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –ø—Ä–∏–º–µ—Ä: @vasya 60 —Ñ–ª—É–¥):")
    bot.register_next_step_handler(msg, process_ban_input)

def process_ban_input(message):
    try:
        parts = message.text.strip().split(maxsplit=2)
        if len(parts) < 2:
            raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤")
        username = parts[0].lstrip("@").lower()
        minutes = int(parts[1])
        reason = parts[2] if len(parts) > 2 else "–ë–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã"

        user_id = find_userid_by_username(username)
        if not user_id:
            bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            send_admin_bans_menu(message.chat.id)
            return

        until = datetime.utcnow() + timedelta(minutes=minutes)
        USER_BANS[username] = {
            'until': until,
            'reason': reason,
            'by': get_user(message.from_user.id).get('username', f"id{message.from_user.id}"),
            'time': datetime.utcnow(),
            'user_id': user_id
        }
        BAN_LOG.append({
            'username': username,
            'user_id': user_id,
            'by': get_user(message.from_user.id).get('username', f"id{message.from_user.id}"),
            'reason': reason,
            'start': datetime.utcnow(),
            'until': until,
            'action': 'ban',
            'unban_by': None,
            'unban_time': None
        })
        save_bans(USER_BANS)
        save_ban_log(BAN_LOG)
        bot.send_message(message.chat.id, f"‚úÖ @{username} –∑–∞–±–∞–Ω–µ–Ω –¥–æ {until.strftime('%Y-%m-%d %H:%M:%S')} UTC. –ü—Ä–∏—á–∏–Ω–∞: {reason}")
        try:
            bot.send_message(user_id, f"‚õî –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –¥–æ {until.strftime('%Y-%m-%d %H:%M:%S')} UTC. –ü—Ä–∏—á–∏–Ω–∞: {reason}")
        except Exception:
            pass
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞: {e}\n–ü—Ä–∏–º–µ—Ä: @vasya 60 —Ñ–ª—É–¥")
    send_admin_bans_menu(message.chat.id)

# --- –†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
@bot.callback_query_handler(func=lambda call: call.data == "unban_do")
def unban_do_callback(call):
    msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ username –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞ (@username):")
    bot.register_next_step_handler(msg, process_unban_input)

def process_unban_input(message):
    username = message.text.strip().lstrip("@").lower()
    user_id = find_userid_by_username(username)
    if username in USER_BANS:
        del USER_BANS[username]
        save_bans(USER_BANS)
        # –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥
        for log in reversed(BAN_LOG):
            if log['username'] == username and log['action'] == 'ban' and not log.get('unban_time'):
                log['action'] = 'ban+unban'
                log['unban_by'] = get_user(message.from_user.id).get('username', f"id{message.from_user.id}")
                log['unban_time'] = datetime.utcnow()
                break
        save_ban_log(BAN_LOG)
        bot.send_message(message.chat.id, f"@{username} —Ä–∞–∑–±–∞–Ω–µ–Ω.")
        try:
            bot.send_message(user_id, f"‚úÖ –í–∞—à –±–∞–Ω —Å–Ω—è—Ç. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.")
        except Exception:
            pass
    else:
        bot.send_message(message.chat.id, f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–∞–Ω–∞.")
    admin_bans_menu_callback(message)

# --- –¢–µ–∫—É—â–∏–µ –±–∞–Ω—ã ---
@bot.callback_query_handler(func=lambda call: call.data == "list_bans")
def list_bans_callback(call):
    if not USER_BANS:
        text = "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∞–Ω–æ–≤."
    else:
        text = "<b>–ê–∫—Ç–∏–≤–Ω—ã–µ –±–∞–Ω—ã:</b>\n"
        for uname, ban in USER_BANS.items():
            text += (
                f"üîª <b>@{uname}</b> (ID: {ban['user_id']})\n"
                f"‚Äî –î–æ: {ban['until'].strftime('%Y-%m-%d %H:%M:%S')} UTC\n"
                f"‚Äî –ü—Ä–∏—á–∏–Ω–∞: {ban['reason']}\n"
                f"‚Äî –ö–µ–º: @{ban['by']}\n\n"
            )
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="admin_bans"))
    bot.send_message(call.message.chat.id, text, reply_markup=markup, parse_mode="HTML")

# --- –õ–æ–≥ –±–∞–Ω–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10) ---
@bot.callback_query_handler(func=lambda call: call.data == "log_bans")
def log_bans_callback(call):
    text = "<b>–ò—Å—Ç–æ—Ä–∏—è –±–∞–Ω–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10):</b>\n"
    if not BAN_LOG:
        text += "–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞."
    else:
        for entry in BAN_LOG[-10:][::-1]:
            text += (
                f"üïì <b>@{entry['username']}</b> (ID: {entry['user_id']})\n"
                f"‚Äî –°: {entry['start'].strftime('%Y-%m-%d %H:%M:%S')}\n"
                f"‚Äî –î–æ: {entry['until'].strftime('%Y-%m-%d %H:%M:%S')}\n"
                f"‚Äî –ü—Ä–∏—á–∏–Ω–∞: {entry['reason']}\n"
                f"‚Äî –ö–µ–º: @{entry['by']}\n"
            )
            if entry.get('unban_time'):
                text += (
                    f"‚Äî –†–∞–∑–±–∞–Ω–µ–Ω: {entry['unban_time'].strftime('%Y-%m-%d %H:%M:%S')} –∞–¥–º–∏–Ω–æ–º: @{entry['unban_by']}\n"
                )
            text += "\n"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="admin_bans"))
    bot.send_message(call.message.chat.id, text, reply_markup=markup, parse_mode="HTML")


def send_admin_bans_menu(chat_id):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üö´ –ó–∞–±–∞–Ω–∏—Ç—å", callback_data="ban_do"))
    markup.add(types.InlineKeyboardButton("üîì –†–∞–∑–±–∞–Ω–∏—Ç—å", callback_data="unban_do"))
    markup.add(types.InlineKeyboardButton("üìã –¢–µ–∫—É—â–∏–µ –±–∞–Ω—ã", callback_data="list_bans"))
    markup.add(types.InlineKeyboardButton("üìú –õ–æ–≥ –±–∞–Ω–æ–≤", callback_data="log_bans"))
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="admin_panel"))
    bot.send_message(chat_id, "–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–Ω–∞–º–∏:", reply_markup=markup)    

def send_topup_notifications():
    for req in PENDING_TOPUPS:
        if req['taken_by'] is None:
            text = (
                f"üö® –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞!\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{req['username']} (ID: {req['user_id']})\n"
                # f"–°—Å—ã–ª–∫–∞: tg://user?id={req['user_id']}\n"
                f"–û–Ω —Ö–æ—á–µ—Ç –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å GW-coin.\n\n"
                f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –µ—Å–ª–∏ –±–µ—Ä–µ—Ç–µ –∑–∞—è–≤–∫—É –≤ —Ä–∞–±–æ—Ç—É!"
            )
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("–í–∑—è—Ç—å –∑–∞—è–≤–∫—É –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"take_topup_{req['user_id']}"))
            for admin_id in ADMIN_IDS:
                try:
                    bot.send_message(admin_id, text, reply_markup=markup)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

def send_topup_notification_for_request(req, reminder=False):
    text = (
        f"üö® –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞!\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{req['username']} (ID: {req['user_id']})\n"
        f"–°—Å—ã–ª–∫–∞: tg://user?id={req['user_id']}\n"
        f"–û–Ω —Ö–æ—á–µ—Ç –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å GW-coin.\n"
    )
    if reminder:
        text += "\n‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï! –ó–∞—è–≤–∫–∞ –≤—Å–µ –µ—â–µ –Ω–µ –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É, –≤–æ–∑—å–º–∏—Ç–µ –µ–µ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!</b>\n"
    text += "\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –µ—Å–ª–∏ –±–µ—Ä–µ—Ç–µ –∑–∞—è–≤–∫—É –≤ —Ä–∞–±–æ—Ç—É!"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–í–∑—è—Ç—å –∑–∞—è–≤–∫—É –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"take_topup_{req['user_id']}"))
    for admin_id in ADMIN_IDS:
        try:
            bot.send_message(admin_id, text, reply_markup=markup, parse_mode="HTML")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É {admin_id}: {e}")


def topup_reminder_loop():
    while True:
        now = datetime.utcnow()
        for req in PENDING_TOPUPS:
            # –ï—Å–ª–∏ –Ω–∏–∫—Ç–æ –Ω–µ –≤–∑—è–ª –∑–∞—è–≤–∫—É –∏ –ø—Ä–æ—à–ª–æ –±–æ–ª–µ–µ 30 –º–∏–Ω—É—Ç ‚Äî —Ç–æ–ª—å–∫–æ –ø–æ —ç—Ç–æ–π –∑–∞—è–≤–∫–µ —à–ª–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!
            if req['taken_by'] is None and (now - req['time']).total_seconds() > 1800:
                send_topup_notification_for_request(req, reminder=True)
                req['time'] = now  # —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É

# –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫
reminder_thread = threading.Thread(target=topup_reminder_loop, daemon=True)
reminder_thread.start()


@bot.message_handler(commands=['topup_status'])
def show_topup_status(message):
    if not is_admin(message.from_user.id):
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    if not PENDING_TOPUPS:
        bot.send_message(message.chat.id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.")
        return
    text = "–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏:\n"
    for req in PENDING_TOPUPS:
        status = f"–í —Ä–∞–±–æ—Ç–µ —É @{req['taken_by']}" if req['taken_by'] else "–û–∂–∏–¥–∞–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"
        text += f"@{req['username']} (ID: {req['user_id']}): {status}\n"
    bot.send_message(message.chat.id, text)

@bot.message_handler(func=lambda m: m.text == "üí∏ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å")
def topup_request(message):
    user = get_user(message.from_user.id)
    username = user.get("username") or f"id{message.from_user.id}"
    bot.send_message(message.chat.id, "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é!")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –≤ –æ—á–µ—Ä–µ–¥—å
    PENDING_TOPUPS.append({
        'user_id': message.from_user.id,
        'username': username,
        'taken_by': None,
        'time': datetime.now(timezone.utc)
    })
    
    send_topup_notifications()    

@bot.callback_query_handler(lambda call: call.data.startswith("take_topup_"))
def take_topup(call):
    user_id = int(call.data.split("_")[-1])
    admin_user = get_user(call.from_user.id)
    admin_username = admin_user.get("username") or f"id{call.from_user.id}"
    for req in PENDING_TOPUPS:
        if req['user_id'] == user_id and req['taken_by'] is None:
            req['taken_by'] = admin_username
            bot.send_message(call.from_user.id, f"–í—ã –≤–∑—è–ª–∏ –∑–∞—è–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{req['username']} (ID: {user_id}) –≤ —Ä–∞–±–æ—Ç—É.")
            bot.send_message(user_id, f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ —Ä–∞–±–æ—Ç–µ! –í–∞–º –Ω–∞–ø–∏—à–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{admin_username}.")
            for aid in ADMIN_IDS:
                if aid != call.from_user.id:
                    try:
                        bot.send_message(aid, f"–ó–∞—è–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{req['username']} –≤–∑—è–ª –≤ —Ä–∞–±–æ—Ç—É @{admin_username}.")
                    except Exception as e:
                        print(e)
            break
    bot.answer_callback_query(call.id, "–ó–∞—è–≤–∫–∞ –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É.")

@bot.callback_query_handler(func=lambda call: call.data == "admin_panel")
def admin_panel_inline(call):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üí∞ GW-coin", callback_data="admin_gwcoin_menu"))
    markup.add(types.InlineKeyboardButton("üè∑Ô∏è DP-–∫–æ–¥—ã", callback_data="admin_dp_menu"))
    markup.add(types.InlineKeyboardButton("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_user_menu"))
    markup.add(types.InlineKeyboardButton("üí≥ –ó–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ", callback_data="admin_topup_requests"))
    markup.add(types.InlineKeyboardButton("üö´ –ë–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_bans"))
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_main"))
    bot.send_message(call.message.chat.id, "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=markup)

# --- GW-coin submenu ---
@bot.callback_query_handler(func=lambda call: call.data == "admin_gwcoin_menu")
def admin_gwcoin_menu_inline(call):
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("‚ûï –í—ã–¥–∞—Ç—å GW-coin", callback_data="admin_give_gw"),
        types.InlineKeyboardButton("‚ûñ –û—Ç–Ω—è—Ç—å GW-coin", callback_data="admin_take_gw"),
    )
    markup.add(
        types.InlineKeyboardButton("üîÑ –û–±–Ω—É–ª–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="admin_reset_gw"),
        types.InlineKeyboardButton("üóíÔ∏è –õ–æ–≥ GW-coin", callback_data="admin_log_gw")
    )
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="admin_panel"))
    bot.send_message(call.message.chat.id, "–û–ø–µ—Ä–∞—Ü–∏–∏ —Å GW-coin:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "admin_give_gw")
def admin_give_gw_inline(call):
    msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ username (@username) –∏ —Å—É–º–º—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–ø—Ä–∏–º–µ—Ä: @vasya 500):")
    bot.register_next_step_handler(msg, process_give)

def process_give(message):
    admin_user = get_user(message.from_user.id)
    try:
        username, amount = message.text.strip().split()
        amount = int(amount)
        if username.startswith("@"):
            username = username[1:]
        user_id = find_userid_by_username(username)
        if user_id:
            user = get_user(user_id)
            old = user["balance"]
            user["balance"] += amount
            set_user(user_id, user)
            log_gwcoin(user, admin_user, old, user["balance"], amount, "–ê–¥–º–∏–Ω-–≤—ã–¥–∞—á–∞")
            bot.send_message(message.chat.id, f"–ù–∞—á–∏—Å–ª–µ–Ω–æ {amount} GW-coin –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username}.")
        else:
            bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º username –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    except Exception:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–æ–¥.")
    admin_gwcoin_menu_inline(message)

@bot.callback_query_handler(func=lambda call: call.data == "admin_take_gw")
def admin_take_gw_inline(call):
    msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ username (@username) –∏ —Å—É–º–º—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–ø—Ä–∏–º–µ—Ä: @vasya 500):")
    bot.register_next_step_handler(msg, process_take)

def process_take(message):
    admin_user = get_user(message.from_user.id)
    try:
        username, amount = message.text.strip().split()
        amount = int(amount)
        if username.startswith("@"):
            username = username[1:]
        user_id = find_userid_by_username(username)
        if user_id:
            user = get_user(user_id)
            old = user["balance"]
            user["balance"] -= amount
            set_user(user_id, user)
            log_gwcoin(user, admin_user, old, user["balance"], -amount, "–ê–¥–º–∏–Ω-–æ—Ç–Ω—è—Ç–∏–µ")
            bot.send_message(message.chat.id, f"–°–ø–∏—Å–∞–Ω–æ {amount} GW-coin —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}.")
        else:
            bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º username –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    except Exception:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–æ–¥.")
    admin_gwcoin_menu_inline(message)

@bot.callback_query_handler(func=lambda call: call.data == "admin_reset_gw")
def admin_reset_gw_inline(call):
    msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ username (@username) –¥–ª—è –æ–±–Ω—É–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:")
    bot.register_next_step_handler(msg, process_reset)

def process_reset(message):
    admin_user = get_user(message.from_user.id)
    try:
        username = message.text.strip()
        if username.startswith("@"):
            username = username[1:]
        user_id = find_userid_by_username(username)
        if user_id:
            user = get_user(user_id)
            old = user["balance"]
            user["balance"] = 0
            set_user(user_id, user)
            log_gwcoin(user, admin_user, old, 0, -old, "–ê–¥–º–∏–Ω-—Å–±—Ä–æ—Å")
            bot.send_message(message.chat.id, f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} –æ–±–Ω—É–ª—ë–Ω.")
        else:
            bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º username –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    except Exception:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–æ–¥.")
    admin_gwcoin_menu_inline(message)

@bot.callback_query_handler(func=lambda call: call.data == "admin_log_gw")
def admin_log_gw_inline(call):
    lines = show_log_lines("GWCOIN")
    if not lines:
        bot.send_message(call.message.chat.id, "–õ–æ–≥ GW-coin –ø—É—Å—Ç.")
    else:
        bot.send_message(call.message.chat.id, "".join(lines))
    admin_gwcoin_menu_inline(call)



# --- DP-–∫–æ–¥—ã submenu ---
@bot.callback_query_handler(func=lambda call: call.data == "admin_dp_menu")
def admin_dp_menu_inline(call):
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("üÜï –î–æ–±–∞–≤–∏—Ç—å DP-–∫–æ–¥—ã", callback_data="admin_add_dp"),
        types.InlineKeyboardButton("üîç –û—Å—Ç–∞—Ç–æ–∫ DP-–∫–æ–¥–æ–≤", callback_data="admin_left_dp"),
    )
    markup.add(
        types.InlineKeyboardButton("üóíÔ∏è –õ–æ–≥ DP-–∫–æ–¥–æ–≤", callback_data="admin_log_dp")
    )
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="admin_panel"))
    bot.send_message(call.message.chat.id, "–û–ø–µ—Ä–∞—Ü–∏–∏ —Å DP-–∫–æ–¥–∞–º–∏:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "admin_add_dp")
def admin_add_dp_inline(call):
    msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–∏–Ω–∞–ª DP (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10) –∏ –∫–æ–¥—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10 abcd1234 efgh5678):")
    bot.register_next_step_handler(msg, process_add_dpcodes)

def admin_dp_menu_message(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("üÜï –î–æ–±–∞–≤–∏—Ç—å DP-–∫–æ–¥—ã", callback_data="admin_add_dp"),
        types.InlineKeyboardButton("üîç –û—Å—Ç–∞—Ç–æ–∫ DP-–∫–æ–¥–æ–≤", callback_data="admin_left_dp"),
    )
    markup.add(
        types.InlineKeyboardButton("üóíÔ∏è –õ–æ–≥ DP-–∫–æ–¥–æ–≤", callback_data="admin_log_dp")
    )
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="admin_panel"))
    bot.send_message(message.chat.id, "–û–ø–µ—Ä–∞—Ü–∏–∏ —Å DP-–∫–æ–¥–∞–º–∏:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "admin_add_dp")
def admin_add_dp_inline(call):
    msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–∏–Ω–∞–ª DP (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10) –∏ –∫–æ–¥—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10 abcd1234 efgh5678):")
    bot.register_next_step_handler(msg, process_add_dpcodes)

def process_add_dpcodes(message):
    admin_user = get_user(message.from_user.id)
    try:
        parts = message.text.strip().split()
        nominal = int(parts[0])
        codes = parts[1:]
        if not codes:
            bot.send_message(message.chat.id, "–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –∫–æ–¥—ã!")
            admin_dp_menu_message(message)
            return
        add_dp_codes(nominal, codes, admin_user)
        bot.send_message(message.chat.id, f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(codes)} DP-–∫–æ–¥–æ–≤ –Ω–æ–º–∏–Ω–∞–ª–æ–º {nominal} DP.")
    except Exception:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–æ–¥. –ü—Ä–∏–º–µ—Ä: 10 abcd1234 efgh5678")
    admin_dp_menu_message(message)

@bot.callback_query_handler(func=lambda call: call.data == "admin_left_dp")
def admin_left_dp_inline(call):
    codes = all_dp_codes_left()
    if not codes:
        text = "–ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö DP-–∫–æ–¥–æ–≤."
    else:
        text = "–û—Å—Ç–∞—Ç–∫–∏ DP-–∫–æ–¥–æ–≤ –ø–æ –Ω–æ–º–∏–Ω–∞–ª–∞–º:\n"
        for nominal in sorted(codes, key=lambda x: int(x)):
            text += f"\n{nominal} DP ({len(codes[nominal])} –∫–æ–¥(–æ–≤)):\n"
            text += "\n".join([f"  - {c}" for c in codes[nominal]])
    bot.send_message(call.message.chat.id, text)
    admin_dp_menu_inline(call)

@bot.callback_query_handler(func=lambda call: call.data == "admin_log_dp")
def admin_log_dp_inline(call):
    lines = show_log_lines("DP")
    if not lines:
        bot.send_message(call.message.chat.id, "–õ–æ–≥ DP-–∫–æ–¥–æ–≤ –ø—É—Å—Ç.")
    else:
        bot.send_message(call.message.chat.id, "".join(lines))
    admin_dp_menu_inline(call)

# --- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ submenu ---
@bot.callback_query_handler(func=lambda call: call.data == "admin_user_menu")
def admin_user_menu_inline(call):
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("üîù –°–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–æ–º", callback_data="admin_make_admin"),
        types.InlineKeyboardButton("üóíÔ∏è –õ–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_log_user"),
    )
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="admin_panel"))
    bot.send_message(call.message.chat.id, "–û–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "admin_make_admin")
def admin_make_admin_inline(call):
    msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ username (@username) –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–º:")
    bot.register_next_step_handler(msg, process_make_admin)

def process_make_admin(message):
    admin_user = get_user(message.from_user.id)
    try:
        username = message.text.strip()
        if username.startswith("@"):
            username = username[1:]
        user_id = find_userid_by_username(username)
        if user_id:
            user = get_user(user_id)
            user["is_admin"] = True
            set_user(user_id, user)
            log_user(admin_user, f"–ù–∞–∑–Ω–∞—á–∏–ª @{username} –∞–¥–º–∏–Ω–æ–º")
            bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω.")
        else:
            bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º username –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    except Exception:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–æ–¥.")
    admin_user_menu_inline(message)

@bot.callback_query_handler(func=lambda call: call.data == "admin_log_user")
def admin_log_user_inline(call):
    lines = show_log_lines("USER")
    if not lines:
        bot.send_message(call.message.chat.id, "–õ–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
    else:
        bot.send_message(call.message.chat.id, "".join(lines))
    admin_user_menu_inline(call)

# ========== –≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤ ==========
@bot.message_handler(commands=['exportlogs'])
def export_logs(message):
    if is_admin(message.from_user.id):
        if os.path.isfile(LOG_FILE):
            with open(LOG_FILE, "rb") as f:
                bot.send_document(message.chat.id, f)
        else:
            bot.send_message(message.chat.id, "–õ–æ–≥-—Ñ–∞–π–ª –ø—É—Å—Ç.")
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

@bot.message_handler(commands=['help'])
def help_command(message):
    bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –∏–ª–∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏. –î–ª—è –∞–¥–º–∏–Ω–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /exportlogs.")

if __name__ == "__main__":
    bot.infinity_polling()
